<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation=" http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
                            http://www.springframework.org/schema/security
                            http://www.springframework.org/schema/security/spring-security-3.2.xsd">

    <bean id="myCache" class="org.springframework.cache.concurrent.ConcurrentMapCache">
        <constructor-arg name="name" value="user-cache"/>
    </bean>

    <bean id="myUserCache" class="org.springframework.security.core.userdetails.cache.SpringCacheBasedUserCache">
        <constructor-arg name="cache" ref="myCache"/>
    </bean>

    <bean id="springSecurityFilterChain" class="org.springframework.security.web.FilterChainProxy">
        <security:filter-chain-map request-matcher="ant">
            <security:filter-chain pattern="/**" filters="
            securityContextFilter,
            requestCacheFilter,
            servletApiFilter,
            sessionMgmtFilter,
            exceptionTranslationFilter,
            filterSecurityInterceptor"/>
        </security:filter-chain-map>
    </bean>

    <!-- responsible for binding the security context to threadlocal -->
    <bean id="securityContextFilter" class="org.springframework.security.web.context.SecurityContextPersistenceFilter">
        <constructor-arg name="repo" ref="securityContextRepository"/>
    </bean>
    
    <bean id="changeSessionIdAuthenticationStrategy"
          class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy"/>

    <bean id="securityContextRepository"
          class="org.springframework.security.web.context.HttpSessionSecurityContextRepository"/>

    <bean id="requestCacheFilter" class="org.springframework.security.web.savedrequest.RequestCacheAwareFilter"/>

    <!-- wraps the ServletRequest, so getRemoteUser() and isUserInRole() uses the security context -->
    <bean id="servletApiFilter"
          class="org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter"/>

    <!-- changes the session identifyer once the user is authenticated, also used if session concurrency control is enabled -->
    <bean id="sessionMgmtFilter" class="org.springframework.security.web.session.SessionManagementFilter">
        <constructor-arg ref="securityContextRepository"/>
        <constructor-arg ref="changeSessionIdAuthenticationStrategy"/>
    </bean>

    <!-- checks that the user is authorized to access the requested resource -->
    <bean id="filterSecurityInterceptor"
          class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="accessDecisionManager" ref="accessDecisionManager"/>
        <property name="securityMetadataSource">
            <security:filter-security-metadata-source lowercase-comparisons="true" request-matcher="ant" use-expressions="true">
                <security:intercept-url pattern="/booking/printPage" access="isAuthenticated()"/>
            </security:filter-security-metadata-source>
        </property>
    </bean>
                <!--<security:intercept-url pattern="/admin/api/**" access="hasRole('ROLE_ADMIN')"/>-->
                <!--<security:intercept-url pattern="/api/booking/getUserBookings" access="isAuthenticated()"/>-->

    <!-- votes if access should be granted -->
    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
        <property name="allowIfAllAbstainDecisions" value="false"/>
        <constructor-arg name="decisionVoters">
            <list>
                <bean class="org.springframework.security.web.access.expression.WebExpressionVoter"/>
                <bean class="org.springframework.security.access.annotation.Jsr250Voter"/>
                <bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
                <bean class="org.springframework.security.access.vote.RoleVoter"/>
            </list>
        </constructor-arg>
    </bean>

    <bean id="authenticationManager" class="org.springframework.security.authentication.ProviderManager">
        <constructor-arg name="providers">
            <list>
                <ref bean="myAuthenticationProvider"/>
                <ref bean="ticketAuthenticationProvider"/>
            </list>
        </constructor-arg>
    </bean>


    <alias name="authenticationManager" alias="org.springframework.security.authenticationManager"/>

    <bean id="exceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
        <constructor-arg name="authenticationEntryPoint" ref="authenticationEntryPoint"/>
        <property name="accessDeniedHandler" ref="accessDeniedHandler"/>
    </bean>

    <bean id="authenticationEntryPoint"  class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint">
    </bean>

    <bean id="accessDeniedHandler" class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
        <property name="errorPage" value="/pages/Security/accessDenied.html"/>
    </bean>

</beans>
